@page "/rooms/{RoomId}"

@using LanternCardGame.Pages.Components
@using Microsoft.AspNetCore.Components.Web.Extensions.Head

@implements IDisposable
@attribute [Authorize]

@inject GameRoomsService roomsService
@inject NavigationManager navManager
@inject CurrentUserService userService
@inject GameService gameService
@inject NotifyService notifyService

@if (this.room != null)
{
    <Title Value="@($"Room {this.room.Name}")"></Title>

    <h3>Room @this.room?.Name</h3>
    <p>@this.room?.PlayerCount / @this.room?.MaxPlayers</p>

    <div class="font-weight-bold">Players:</div>
    <ul class="list-group list-group-flush mb-3">
        @foreach (var player in room?.Players ?? new PlayerModel[0])
        {
            <li class="list-group-item">@player?.Username</li>
        }
    </ul>

    <div class="mb-3">
        @if (this.room?.OwnerId == this.userService.UserId)
        {
            <button class="btn btn-outline-primary mr-2" disabled="@(this.room?.PlayerCount < this.room?.MaxPlayers ? true : false)" @onclick="this.StartGame">Start Game</button>
            <button class="btn btn-outline-danger" @onclick=" () => this.DeleteRoom()">Delete Room</button>
        }
        else
        {
            if (this.roomsService.IsPlayerInTheRoom(this.userService.InstanceId, this.RoomId))
            {
                <button class="btn btn-outline-warning" @onclick="() => this.LeaveRoom()">Leave Room</button>
            }
            else
            {
                <button disabled=@(this.room.PlayerCount < this.room.MaxPlayers ? false : true)
                        class="btn btn-outline-success"
                        @onclick=" () => this.JoinRoom()">
                    Join Room
                </button>
            }
        }
    </div>
    <br />
    
    if (this.roomsService.IsPlayerInTheRoom(this.userService.InstanceId, this.RoomId))
    {
        <div id="chat">
            <ChatComponent RoomId="@this.RoomId" />
        </div>
    }
}

@code {
    [Parameter]
    public string RoomId { get; set; }

    public ChatInputModel chatModel = new ChatInputModel();
    private GameRoomModel room;
    private ICollection<string[]> subscriptionsInfo = new HashSet<string[]>();

    protected override void OnInitialized()
    {
        this.room = this.roomsService.GetRoom(this.RoomId);
        if (this.room == null || (this.room != null && this.room.InGame))
        {
            this.navManager.NavigateTo("/rooms", true);
        }

        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
        {
            base.OnAfterRender(firstRender);
            return;
        }

        if (!this.roomsService.IsPlayerInTheRoom(this.userService.InstanceId, this.RoomId))
        {
            this.notifyService.AddToGroup(this.userService.InstanceId, this.RoomId);
        }

        this.subscriptionsInfo.Add(this.notifyService.Subscribe(this.userService.InstanceId, "RefreshRoom", async () => await RefreshRoom()));
        this.subscriptionsInfo.Add(this.notifyService.Subscribe(this.userService.InstanceId, "RoomDeleted", this.Deleted));
        this.subscriptionsInfo.Add(this.notifyService.Subscribe(this.userService.InstanceId, "GameStarting", () => this.navManager.NavigateTo($"/game/{this.RoomId}")));
        base.OnAfterRender(firstRender);
    }

    public void Deleted()
    {
        this.navManager.NavigateTo("/rooms");
    }

    public void StartGame()
    {
        this.roomsService.StartGame(this.RoomId);
        this.gameService.StartGame(this.RoomId);
    }

    public void JoinRoom()
    {
        this.roomsService.AddPlayerToRoom(this.userService.UserId, this.RoomId);
        this.StateHasChanged();
    }

    public void DeleteRoom(bool navigate = true)
    {
        this.roomsService.DeleteRoom(this.RoomId);
        this.room = this.roomsService.GetRoom(this.RoomId);
        if (navigate)
        {
            this.navManager.NavigateTo("/rooms");
        }
    }

    public void LeaveRoom(bool navigate = true)
    {
        this.roomsService.RemovePlayerFromRoom(userService.UserId, this.RoomId);
        if (navigate)
        {
            this.navManager.NavigateTo("/rooms");
        }
    }

    public async Task RefreshRoom()
    {
        this.room = this.roomsService.GetRoom(this.RoomId);
        await this.InvokeAsync(this.StateHasChanged);
    }

    public void Dispose()
    {
        foreach (var subscriptionInfo in this.subscriptionsInfo)
        {
            this.notifyService.Unsubscribe(subscriptionInfo[0], subscriptionInfo[1]);
        }

        this.room = this.roomsService.GetRoom(RoomId);
        if (room != null && !this.room.InGame)
        {

            if (!this.roomsService.IsPlayerInTheRoom(this.userService.InstanceId, this.RoomId))
            {
                this.notifyService.RemoveFromGroup(this.userService.InstanceId, this.RoomId);
            }
            if (this.userService.UserId == this.room.OwnerId)
            {
                this.DeleteRoom(false);
            }
            else
            {
                this.LeaveRoom(false);
            }
        }
    }
}
