@page "/rooms"

@using Shared.Enums
@using Microsoft.AspNetCore.Components.Web.Extensions.Head
@implements IDisposable

@attribute [Authorize]

@inject GameRoomsService roomService
@inject CurrentUserService userService
@inject OnlinePlayersService playerService
@inject NotifyService notifyService
@inject NotificationService notificationService
@inject NavigationManager navManager

<Title Value="Browse rooms"></Title>

<div class="d-flex justify-content-between mb-3">
    <h2>Rooms</h2>
    @{ var nav = "/rooms/create"; }
    <button class="btn btn-outline-success" @onclick="() => this.navManager.NavigateTo(nav)">
        <span class="oi oi-plus"></span> Create
    </button>
</div>

<table class="table">
    <thead class="thead-light">
        <tr>
            <th>Name</th>
            <th>Players</th>
            <th>Max Points</th>
            <th>Time per turn</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (this.rooms.Count == 0)
        {
            <tr class="d-md-table-row">
                <td colspan="5">
                    No rooms
                </td>
            </tr>
        }
        else
        {
            foreach (var room in this.rooms)
            {
                <tr class="d-md-table-row">
                    <td>@(string.IsNullOrWhiteSpace(room.Name) ? "(No name)" : room.Name)</td>
                    <td>@room.PlayerCount / @room.MaxPlayers</td>
                    <td>@room.MaxPoints</td>
                    <td>@(room.TimePerTurn.TotalSeconds > 0 ? $"{room.TimePerTurn.ToString(@"m\:ss")} min" : "Unlimited")</td>
                    <td>
                        <button class="btn btn-primary w-100"
                                disabled="@(room.PlayerCount >= room.MaxPlayers)"
                                @onclick="() => this.JoinRoom(room.Id)">
                            Join
                        </button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    ICollection<GameRoomModel> rooms;
    private string[] subscriptionInfo;

    protected override async Task OnInitializedAsync()
    {
        await RefreshRoomsAsync();
        await base.OnInitializedAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        if (this.playerService.GetPlayerByInstanceId(this.userService.InstanceId).PlayerStatus == PlayerStatus.Duplicate)
        {
            this.navManager.NavigateTo("/");
        }

        this.subscriptionInfo = this.notifyService.Subscribe(this.userService.InstanceId, "RefreshRooms", async () => await RefreshRoomsAsync());
        base.OnAfterRender(firstRender);
    }

    public async Task RefreshRoomsAsync()
    {
        this.rooms = this.roomService.GetAllRoomsNotInGame().ToHashSet();
        await this.InvokeAsync(this.StateHasChanged);
    }

    public void JoinRoom(string roomId)
    {
        try
        {
            this.roomService.AddPlayerToRoom(userService.UserId, roomId);
            this.navManager.NavigateTo($"/rooms/{roomId}");
        }
        catch (Exception ex)
        {
            this.notificationService.AddPlayerNotification(
                this.userService.InstanceId,
                ex.Message,
                severity: NotificationType.Danger);
        }
    }

    public void Dispose()
    {
        this.notifyService.Unsubscribe(this.subscriptionInfo[0], this.subscriptionInfo[1]);
    }
}
