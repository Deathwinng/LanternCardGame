@page "/user/{Username}"

@using Microsoft.AspNetCore.Components.Web.Extensions.Head

@inject PlayerStatsService statsService
@inject CurrentUserService currentUserService
@inject UserService userService
@inject FriendsService friendsService
@inject NotificationService notificationService
@inject NotifyService notifyService
@inject OnlinePlayersService playersService
@inject NavigationManager navigationManager

@if (this.playerExists)
{
    var ownPage = this.currentUserService.Username.ToLower() == this.Username.ToLower();
    <Title Value="@($"{this.Username} info")"></Title>

    var placedFirstPercentage = (((double)this.playerStats.GamesWon / this.playerStats.GamesFinished) * 100.0).ToString("F2");
    var placedLastPercentage = (((double)this.playerStats.GamesPlacedLast / this.playerStats.GamesFinished) * 100.0).ToString("F2");
    <div id="top" class="d-flex justify-content-between mb-3">
        @if (ownPage)
        {
            <h2>My profile</h2>
            <button class="btn btn-outline-primary"
                    @onclick='() => this.navigationManager.NavigateTo("/Identity/Account/Manage", true)'>
                <span class="oi oi-wrench"></span>
                Profile settings
            </button>
        }
        else
        {
            <h2>@this.Username info</h2>
            <button class="btn @(this.areFriends ? "btn-outline-success" : "btn-outline-primary")"
                    @onclick='async () => await this.SendFriendRequest()'
                    disabled="@(this.areFriends || this.requestSent)">
                <span class="oi @(this.areFriends || this.requestSent ? "oi-check" : "oi-plus")"></span>
                @(this.areFriends ? "Friends" : (this.requestSent ? "Friend request sent" : "Send friend request"))
            </button>
        }
    </div>


    <ul class="list-group">
        <li class="list-group-item">Joined: @this.playerStats.RegistrationDate.ToLocalTime().ToShortDateString()</li>
        <li class="list-group-item">Games finished: @this.playerStats.GamesFinished</li>
        <li class="list-group-item">Games left: @this.playerStats.GamesLeft</li>
        <li class="list-group-item">Games placed first: @this.playerStats.GamesWon @(this.playerStats.GamesWon > 0 ?$"({placedFirstPercentage}%)" : null)</li>
        <li class="list-group-item">Games placed last: @this.playerStats.GamesPlacedLast @(this.playerStats.GamesPlacedLast > 0 ?$"({placedLastPercentage}%)" : null)</li>
    </ul>

    if (ownPage)
    {
        @if (this.friendRequests.Count > 0 || this.sentFriendRequests.Count > 0)
        {
            <h3 class="mt-4">Friend requests <span class="badge badge-danger">@this.friendRequests.Count</span></h3>
            <ul class="list-group">
                @foreach (var requester in this.friendRequests)
                {
                    <li class="list-group-item d-flex justify-content-between">
                        <span class="align-self-center">
                            @requester
                        </span>
                        <div>
                            <button class="btn btn-success" @onclick="async () => await this.AcceptFriendRequestAsync(requester)">Accept</button>
                            <button class="btn btn-outline-danger" @onclick="async () => await this.DismissFriendRequestAsync(requester)">Dissmis</button>
                        </div>
                    </li>
                }
                @foreach (var receiver in this.sentFriendRequests)
                {
                    <li class="list-group-item d-flex justify-content-between">
                        <span class="align-self-center">
                            @receiver
                        </span>
                        <div>
                            <button class="btn btn-outline-primary" disabled>Pending</button>
                            <button class="btn btn-outline-danger">Cancel</button>
                        </div>
                    </li>
                }
            </ul>
        }
        <h3 class="mt-3">Friends <span class="badge badge-info">@this.friends.Count</span></h3>
        <ul class="list-group">
            @if (this.friends.Count > 0)
            {
                @foreach (var friend in this.friends)
                {
                    <li class="list-group-item">@friend</li>
                }
            }
            else
            {
                <li class="list-group-item">No friends.</li>
            }
        </ul>
    }
}
else
{
    <h3 class="text-danger">Player doesn't exist!</h3>
}

@code {
    [Parameter]
    public string Username { get; set; }

    private bool playerExists = true;
    private Data.PlayerStats playerStats;
    private bool areFriends = false;
    private bool requestSent = false;
    private HashSet<string> friends = new HashSet<string>();
    private HashSet<string> friendRequests = new HashSet<string>();
    private HashSet<string> sentFriendRequests = new HashSet<string>();

    protected override void OnParametersSet()
    {
        this.UpdatePlayerStats();
        base.OnParametersSet();
    }

    protected override void OnInitialized()
    {
        this.UpdatePlayerStats();
        base.OnInitialized();
    }

    private void UpdatePlayerStats()
    {
        this.playerStats = this.statsService.GetPlayerStatsByUsername(this.Username);
        this.playerExists = this.playerStats != null;
        if (this.playerExists && this.currentUserService.Username.ToLower() == this.Username.ToLower())
        {
            this.friends = this.friendsService.GetPlayerFriendsUsernames(this.currentUserService.UserId).ToHashSet();
            this.friendRequests = this.friendsService.GetPlayerFriendRequestsUsernames(this.currentUserService.UserId).ToHashSet();
            this.sentFriendRequests = this.friendsService.GetPendingPlayerFriendRequestsUsernames(this.currentUserService.UserId).ToHashSet();
        }
        else
        {
            this.requestSent = this.friendsService.CheckRequestExists(this.currentUserService.Username, this.Username);
            this.areFriends = this.friendsService.CheckFriends(this.currentUserService.Username, this.Username);
        }

        this.StateHasChanged();
    }

    private async Task SendFriendRequest()
    {
        var reciever = await this.userService.GetUserByUsernameAsync(this.Username);
        await this.friendsService.SendFriendRequestAsync(this.currentUserService.UserId, reciever?.Id);
        if (this.playersService.IsPlayerOnline(reciever.Id))
        {
            var instanceId = this.playersService.GetPlayerById(reciever.Id).InstanceId;
            this.notificationService.AddPlayerNotification(instanceId, $"New friend request received from {this.currentUserService.Username}!");
            this.notifyService.InvokeByPlayer(instanceId, "ReceiveNotification");
            this.notifyService.InvokeByPlayer(instanceId, "FriendRequest");
        }

        this.requestSent = true;
        this.StateHasChanged();
    }

    private async Task AcceptFriendRequestAsync(string senderUsername)
    {
        await this.friendsService.AcceptFriendRequestAsync(senderUsername, this.Username);
        this.friends = this.friendsService.GetPlayerFriendsUsernames(this.currentUserService.UserId).ToHashSet();
        this.friendRequests = this.friendsService.GetPlayerFriendRequestsUsernames(this.currentUserService.UserId).ToHashSet();
        this.notifyService.InvokeByPlayer(this.currentUserService.InstanceId, "FriendRequest");
        this.StateHasChanged();
    }

    private async Task DismissFriendRequestAsync(string senderUsername)
    {
        await this.friendsService.DismissFriendRequestAsync(senderUsername, this.Username);
        this.friendRequests = this.friendsService.GetPlayerFriendRequestsUsernames(this.currentUserService.UserId).ToHashSet();
        this.notifyService.InvokeByPlayer(this.currentUserService.InstanceId, "FriendRequest");
        this.StateHasChanged();
    }
}
